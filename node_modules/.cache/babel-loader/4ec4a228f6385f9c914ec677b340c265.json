{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itzme\\\\Desktop\\\\ReactWeb\\\\exercise\\\\src\\\\component\\\\details.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Details({\n  match\n}) {\n  _s();\n\n  const [moreDetails, setMoreDetails] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    getDetails();\n    console.log(match);\n  }, []);\n\n  async function getDetails() {\n    const response = await fetch(`https://api.chucknorris.io/jokes/${match.params.id}`);\n    const data = await response.json();\n    console.log(data);\n    setMoreDetails(data);\n    setIsLoading(false);\n  }\n\n  let stringArray = [];\n  stringArray = [...stringArray, moreDetails.created_at];\n  const date = stringArray.toString().split(' ');\n  let updateArray = [];\n  updateArray = [...updateArray, moreDetails.updated_at];\n  const update = updateArray.toString().split(' ');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"notloading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Details, \"u9V8T7qdG77WlWzFKmj394JKbCY=\");\n\n_c = Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["C:/Users/itzme/Desktop/ReactWeb/exercise/src/component/details.js"],"names":["React","useState","useEffect","Details","match","moreDetails","setMoreDetails","isLoading","setIsLoading","getDetails","console","log","response","fetch","params","id","data","json","stringArray","created_at","date","toString","split","updateArray","updated_at","update"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAAyB;AAAA;;AACpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACXO,IAAAA,UAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACH,GAHQ,EAGP,EAHO,CAAT;;AAKA,iBAAeK,UAAf,GAA2B;AAEvB,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmCT,KAAK,CAACU,MAAN,CAAaC,EAAG,EAArD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAV,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH;;AACD,MAAIU,WAAW,GAAE,EAAjB;AACAA,EAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiBb,WAAW,CAACc,UAA7B,CAAd;AACA,QAAMC,IAAI,GAAGF,WAAW,CAACG,QAAZ,GAAuBC,KAAvB,CAA6B,GAA7B,CAAb;AAEA,MAAIC,WAAW,GAAG,EAAlB;AACAA,EAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiBlB,WAAW,CAACmB,UAA7B,CAAd;AACA,QAAMC,MAAM,GAAGF,WAAW,CAACF,QAAZ,GAAuBC,KAAvB,CAA6B,GAA7B,CAAf;AAIA,sBACI;AAAA,cACKf,SAAS,gBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHR;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GApCuBJ,O;;KAAAA,O","sourcesContent":["import React,{useState, useEffect} from 'react';\r\n\r\nexport default function Details({match}){\r\n    const [moreDetails, setMoreDetails] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(()=> {\r\n        getDetails();\r\n        console.log(match);\r\n    },[]);\r\n\r\n    async function getDetails(){\r\n\r\n        const response = await fetch(`https://api.chucknorris.io/jokes/${match.params.id}`);\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setMoreDetails(data);\r\n        setIsLoading(false);\r\n\r\n    }\r\n    let stringArray =[];\r\n    stringArray = [...stringArray, moreDetails.created_at];\r\n    const date = stringArray.toString().split(' ');\r\n    \r\n    let updateArray = [];\r\n    updateArray = [...updateArray, moreDetails.updated_at];\r\n    const update = updateArray.toString().split(' ');\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? \r\n                <div>loading</div> : \r\n                <div>notloading</div>\r\n            }\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}